{
  "version": 3,
  "sources": ["../../../../../../Users/shazhongjin/www.inversedesign.net/inversedesign/netlify/functions/verify-password.js"],
  "sourceRoot": "/var/folders/js/1zc4sx3x2mx8l8ftg7d_s7g40000gn/T/tmp-23670-mlNV4O44lWrp",
  "sourcesContent": ["const crypto = require('crypto');\n\n// \u5BC6\u7801\u6570\u636E\u5E93 (\u5B9E\u9645\u5E94\u7528\u4E2D\u5E94\u8BE5\u4F7F\u7528\u6570\u636E\u5E93)\nconst PASSWORD_DB = {\n  'content-1': {\n    hash: crypto.createHash('sha256').update('secret123').digest('hex'),\n    salt: 'random-salt-1',\n    attempts: 0,\n    lastAttempt: null\n  },\n  'content-2': {\n    hash: crypto.createHash('sha256').update('tech456').digest('hex'),\n    salt: 'random-salt-2',\n    attempts: 0,\n    lastAttempt: null\n  },\n  'content-3': {\n    hash: crypto.createHash('sha256').update('business789').digest('hex'),\n    salt: 'random-salt-3',\n    attempts: 0,\n    lastAttempt: null\n  }\n};\n\n// \u8BBF\u95EE\u65E5\u5FD7 (\u5B9E\u9645\u5E94\u7528\u4E2D\u5E94\u8BE5\u4F7F\u7528\u6570\u636E\u5E93)\nconst ACCESS_LOGS = [];\n\nexports.handler = async (event, context) => {\n  // \u53EA\u5141\u8BB8 POST \u8BF7\u6C42\n  if (event.httpMethod !== 'POST') {\n    return {\n      statusCode: 405,\n      body: JSON.stringify({ error: 'Method not allowed' })\n    };\n  }\n\n  try {\n    const { contentId, password } = JSON.parse(event.body);\n    \n    // \u57FA\u672C\u9A8C\u8BC1\n    if (!contentId || !password) {\n      return {\n        statusCode: 400,\n        body: JSON.stringify({ error: 'Missing contentId or password' })\n      };\n    }\n\n    // \u68C0\u67E5\u5185\u5BB9\u662F\u5426\u5B58\u5728\n    if (!PASSWORD_DB[contentId]) {\n      return {\n        statusCode: 404,\n        body: JSON.stringify({ error: 'Content not found' })\n      };\n    }\n\n    const content = PASSWORD_DB[contentId];\n    const clientIP = event.headers['client-ip'] || event.headers['x-forwarded-for'] || 'unknown';\n    const userAgent = event.headers['user-agent'] || 'unknown';\n\n    // \u68C0\u67E5\u662F\u5426\u88AB\u9501\u5B9A (\u9632\u6B62\u66B4\u529B\u7834\u89E3)\n    const now = Date.now();\n    const lockoutDuration = 15 * 60 * 1000; // 15\u5206\u949F\u9501\u5B9A\n    \n    if (content.lastAttempt && (now - content.lastAttempt) < lockoutDuration && content.attempts >= 5) {\n      return {\n        statusCode: 429,\n        body: JSON.stringify({ \n          error: 'Too many failed attempts. Please try again later.',\n          remainingTime: Math.ceil((lockoutDuration - (now - content.lastAttempt)) / 1000)\n        })\n      };\n    }\n\n    // \u9A8C\u8BC1\u5BC6\u7801\n    const inputHash = crypto.createHash('sha256').update(password + content.salt).digest('hex');\n    const isValid = inputHash === content.hash;\n\n    // \u66F4\u65B0\u5C1D\u8BD5\u6B21\u6570\n    if (isValid) {\n      content.attempts = 0;\n      content.lastAttempt = null;\n    } else {\n      content.attempts += 1;\n      content.lastAttempt = now;\n    }\n\n    // \u8BB0\u5F55\u8BBF\u95EE\u65E5\u5FD7\n    ACCESS_LOGS.push({\n      contentId,\n      success: isValid,\n      timestamp: new Date().toISOString(),\n      ip: clientIP,\n      userAgent,\n      attempts: content.attempts\n    });\n\n    // \u9650\u5236\u65E5\u5FD7\u6570\u91CF\n    if (ACCESS_LOGS.length > 1000) {\n      ACCESS_LOGS.splice(0, 100);\n    }\n\n    return {\n      statusCode: 200,\n      headers: {\n        'Content-Type': 'application/json',\n        'Cache-Control': 'no-cache, no-store, must-revalidate'\n      },\n      body: JSON.stringify({\n        valid: isValid,\n        attempts: content.attempts,\n        locked: content.attempts >= 5\n      })\n    };\n\n  } catch (error) {\n    console.error('Password verification error:', error);\n    \n    return {\n      statusCode: 500,\n      body: JSON.stringify({ error: 'Internal server error' })\n    };\n  }\n};\n"],
  "mappings": "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",
  "names": []
}
