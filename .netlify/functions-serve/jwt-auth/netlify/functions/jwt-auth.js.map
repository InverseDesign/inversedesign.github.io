{
  "version": 3,
  "sources": ["../../../../../../Users/shazhongjin/www.inversedesign.net/inversedesign/netlify/functions/jwt-auth.js"],
  "sourceRoot": "/var/folders/js/1zc4sx3x2mx8l8ftg7d_s7g40000gn/T/tmp-36696-960XeNQgNX26",
  "sourcesContent": ["const crypto = require('crypto');\n\n// JWT \u5BC6\u94A5 (\u5B9E\u9645\u5E94\u7528\u4E2D\u5E94\u8BE5\u4F7F\u7528\u73AF\u5883\u53D8\u91CF)\nconst JWT_SECRET = process.env.JWT_SECRET || 'your-super-secret-jwt-key-2024';\nconst REFRESH_SECRET = process.env.REFRESH_SECRET || 'your-super-secret-refresh-key-2024';\n\n// \u5BC6\u7801\u6570\u636E\u5E93 (\u5B9E\u9645\u5E94\u7528\u4E2D\u5E94\u8BE5\u4F7F\u7528\u6570\u636E\u5E93)\nconst PASSWORD_DB = {\n  'content-1': {\n    hash: crypto.createHash('sha256').update('secret123').digest('hex'),\n    salt: 'random-salt-1'\n  },\n  'content-2': {\n    hash: crypto.createHash('sha256').update('tech456').digest('hex'),\n    salt: 'random-salt-2'\n  },\n  'content-3': {\n    hash: crypto.createHash('sha256').update('business789').digest('hex'),\n    salt: 'random-salt-3'\n  }\n};\n\n// \u751F\u6210 JWT \u4EE4\u724C\nfunction generateJWT(payload, secret, expiresIn = '1h') {\n  const header = {\n    alg: 'HS256',\n    typ: 'JWT'\n  };\n\n  const now = Math.floor(Date.now() / 1000);\n  const exp = now + (expiresIn === '1h' ? 3600 : expiresIn === '7d' ? 7 * 24 * 3600 : 3600);\n\n  const jwtPayload = {\n    ...payload,\n    iat: now,\n    exp: exp\n  };\n\n  const encodedHeader = Buffer.from(JSON.stringify(header)).toString('base64url');\n  const encodedPayload = Buffer.from(JSON.stringify(jwtPayload)).toString('base64url');\n  \n  const signature = crypto\n    .createHmac('sha256', secret)\n    .update(`${encodedHeader}.${encodedPayload}`)\n    .digest('base64url');\n\n  return `${encodedHeader}.${encodedPayload}.${signature}`;\n}\n\n// \u9A8C\u8BC1 JWT \u4EE4\u724C\nfunction verifyJWT(token, secret) {\n  try {\n    const parts = token.split('.');\n    if (parts.length !== 3) {\n      return null;\n    }\n\n    const [header, payload, signature] = parts;\n    \n    // \u9A8C\u8BC1\u7B7E\u540D\n    const expectedSignature = crypto\n      .createHmac('sha256', secret)\n      .update(`${header}.${payload}`)\n      .digest('base64url');\n\n    if (signature !== expectedSignature) {\n      return null;\n    }\n\n    // \u89E3\u6790\u8F7D\u8377\n    const decodedPayload = JSON.parse(Buffer.from(payload, 'base64url').toString());\n    \n    // \u68C0\u67E5\u8FC7\u671F\u65F6\u95F4\n    const now = Math.floor(Date.now() / 1000);\n    if (decodedPayload.exp && decodedPayload.exp < now) {\n      return null;\n    }\n\n    return decodedPayload;\n  } catch (error) {\n    return null;\n  }\n}\n\n// \u4E3B\u5904\u7406\u51FD\u6570\nexports.handler = async (event, context) => {\n  // \u53EA\u5141\u8BB8 POST \u8BF7\u6C42\n  if (event.httpMethod !== 'POST') {\n    return {\n      statusCode: 405,\n      body: JSON.stringify({ error: 'Method not allowed' })\n    };\n  }\n\n  try {\n    const { contentId, password, refreshToken } = JSON.parse(event.body);\n    \n    // \u5982\u679C\u662F\u5237\u65B0\u4EE4\u724C\u8BF7\u6C42\n    if (refreshToken) {\n      const payload = verifyJWT(refreshToken, REFRESH_SECRET);\n      if (payload && payload.contentId) {\n        // \u751F\u6210\u65B0\u7684\u8BBF\u95EE\u4EE4\u724C\n        const newAccessToken = generateJWT(\n          { contentId: payload.contentId, type: 'access' },\n          JWT_SECRET,\n          '1h'\n        );\n\n        return {\n          statusCode: 200,\n          headers: {\n            'Content-Type': 'application/json',\n            'Cache-Control': 'no-cache, no-store, must-revalidate'\n          },\n          body: JSON.stringify({\n            success: true,\n            accessToken: newAccessToken\n          })\n        };\n      } else {\n        return {\n          statusCode: 401,\n          body: JSON.stringify({ error: 'Invalid refresh token' })\n        };\n      }\n    }\n\n    // \u5BC6\u7801\u9A8C\u8BC1\n    if (!contentId || !password) {\n      return {\n        statusCode: 400,\n        body: JSON.stringify({ error: 'Missing contentId or password' })\n      };\n    }\n\n    // \u68C0\u67E5\u5185\u5BB9\u662F\u5426\u5B58\u5728\n    if (!PASSWORD_DB[contentId]) {\n      return {\n        statusCode: 404,\n        body: JSON.stringify({ error: 'Content not found' })\n      };\n    }\n\n    const content = PASSWORD_DB[contentId];\n    const clientIP = event.headers['client-ip'] || event.headers['x-forwarded-for'] || 'unknown';\n\n    // \u9A8C\u8BC1\u5BC6\u7801\n    const inputHash = crypto.createHash('sha256').update(password + content.salt).digest('hex');\n    const isValid = inputHash === content.hash;\n\n    if (isValid) {\n      // \u751F\u6210\u8BBF\u95EE\u4EE4\u724C\u548C\u5237\u65B0\u4EE4\u724C\n      const accessToken = generateJWT(\n        { contentId, type: 'access' },\n        JWT_SECRET,\n        '1h'\n      );\n\n      const refreshToken = generateJWT(\n        { contentId, type: 'refresh' },\n        REFRESH_SECRET,\n        '7d'\n      );\n\n      // \u8BB0\u5F55\u6210\u529F\u8BBF\u95EE\n      console.log('Successful authentication:', {\n        contentId,\n        ip: clientIP,\n        timestamp: new Date().toISOString()\n      });\n\n      return {\n        statusCode: 200,\n        headers: {\n          'Content-Type': 'application/json',\n          'Cache-Control': 'no-cache, no-store, must-revalidate'\n        },\n        body: JSON.stringify({\n          success: true,\n          accessToken,\n          refreshToken,\n          expiresIn: 3600 // 1\u5C0F\u65F6\n        })\n      };\n\n    } else {\n      // \u8BB0\u5F55\u5931\u8D25\u8BBF\u95EE\n      console.log('Failed authentication attempt:', {\n        contentId,\n        ip: clientIP,\n        timestamp: new Date().toISOString()\n      });\n\n      return {\n        statusCode: 401,\n        body: JSON.stringify({ \n          success: false,\n          error: 'Invalid password' \n        })\n      };\n    }\n\n  } catch (error) {\n    console.error('JWT authentication error:', error);\n    \n    return {\n      statusCode: 500,\n      body: JSON.stringify({ error: 'Internal server error' })\n    };\n  }\n};\n"],
  "mappings": ";AAAA,IAAM,SAAS,QAAQ,QAAQ;AAG/B,IAAM,aAAa,QAAQ,IAAI,cAAc;AAC7C,IAAM,iBAAiB,QAAQ,IAAI,kBAAkB;AAGrD,IAAM,cAAc;AAAA,EAClB,aAAa;AAAA,IACX,MAAM,OAAO,WAAW,QAAQ,EAAE,OAAO,WAAW,EAAE,OAAO,KAAK;AAAA,IAClE,MAAM;AAAA,EACR;AAAA,EACA,aAAa;AAAA,IACX,MAAM,OAAO,WAAW,QAAQ,EAAE,OAAO,SAAS,EAAE,OAAO,KAAK;AAAA,IAChE,MAAM;AAAA,EACR;AAAA,EACA,aAAa;AAAA,IACX,MAAM,OAAO,WAAW,QAAQ,EAAE,OAAO,aAAa,EAAE,OAAO,KAAK;AAAA,IACpE,MAAM;AAAA,EACR;AACF;AAGA,SAAS,YAAY,SAAS,QAAQ,YAAY,MAAM;AACtD,QAAM,SAAS;AAAA,IACb,KAAK;AAAA,IACL,KAAK;AAAA,EACP;AAEA,QAAM,MAAM,KAAK,MAAM,KAAK,IAAI,IAAI,GAAI;AACxC,QAAM,MAAM,OAAO,cAAc,OAAO,OAAO,cAAc,OAAO,IAAI,KAAK,OAAO;AAEpF,QAAM,aAAa;AAAA,IACjB,GAAG;AAAA,IACH,KAAK;AAAA,IACL;AAAA,EACF;AAEA,QAAM,gBAAgB,OAAO,KAAK,KAAK,UAAU,MAAM,CAAC,EAAE,SAAS,WAAW;AAC9E,QAAM,iBAAiB,OAAO,KAAK,KAAK,UAAU,UAAU,CAAC,EAAE,SAAS,WAAW;AAEnF,QAAM,YAAY,OACf,WAAW,UAAU,MAAM,EAC3B,OAAO,GAAG,aAAa,IAAI,cAAc,EAAE,EAC3C,OAAO,WAAW;AAErB,SAAO,GAAG,aAAa,IAAI,cAAc,IAAI,SAAS;AACxD;AAGA,SAAS,UAAU,OAAO,QAAQ;AAChC,MAAI;AACF,UAAM,QAAQ,MAAM,MAAM,GAAG;AAC7B,QAAI,MAAM,WAAW,GAAG;AACtB,aAAO;AAAA,IACT;AAEA,UAAM,CAAC,QAAQ,SAAS,SAAS,IAAI;AAGrC,UAAM,oBAAoB,OACvB,WAAW,UAAU,MAAM,EAC3B,OAAO,GAAG,MAAM,IAAI,OAAO,EAAE,EAC7B,OAAO,WAAW;AAErB,QAAI,cAAc,mBAAmB;AACnC,aAAO;AAAA,IACT;AAGA,UAAM,iBAAiB,KAAK,MAAM,OAAO,KAAK,SAAS,WAAW,EAAE,SAAS,CAAC;AAG9E,UAAM,MAAM,KAAK,MAAM,KAAK,IAAI,IAAI,GAAI;AACxC,QAAI,eAAe,OAAO,eAAe,MAAM,KAAK;AAClD,aAAO;AAAA,IACT;AAEA,WAAO;AAAA,EACT,SAAS,OAAO;AACd,WAAO;AAAA,EACT;AACF;AAGA,QAAQ,UAAU,OAAO,OAAO,YAAY;AAE1C,MAAI,MAAM,eAAe,QAAQ;AAC/B,WAAO;AAAA,MACL,YAAY;AAAA,MACZ,MAAM,KAAK,UAAU,EAAE,OAAO,qBAAqB,CAAC;AAAA,IACtD;AAAA,EACF;AAEA,MAAI;AACF,UAAM,EAAE,WAAW,UAAU,aAAa,IAAI,KAAK,MAAM,MAAM,IAAI;AAGnE,QAAI,cAAc;AAChB,YAAM,UAAU,UAAU,cAAc,cAAc;AACtD,UAAI,WAAW,QAAQ,WAAW;AAEhC,cAAM,iBAAiB;AAAA,UACrB,EAAE,WAAW,QAAQ,WAAW,MAAM,SAAS;AAAA,UAC/C;AAAA,UACA;AAAA,QACF;AAEA,eAAO;AAAA,UACL,YAAY;AAAA,UACZ,SAAS;AAAA,YACP,gBAAgB;AAAA,YAChB,iBAAiB;AAAA,UACnB;AAAA,UACA,MAAM,KAAK,UAAU;AAAA,YACnB,SAAS;AAAA,YACT,aAAa;AAAA,UACf,CAAC;AAAA,QACH;AAAA,MACF,OAAO;AACL,eAAO;AAAA,UACL,YAAY;AAAA,UACZ,MAAM,KAAK,UAAU,EAAE,OAAO,wBAAwB,CAAC;AAAA,QACzD;AAAA,MACF;AAAA,IACF;AAGA,QAAI,CAAC,aAAa,CAAC,UAAU;AAC3B,aAAO;AAAA,QACL,YAAY;AAAA,QACZ,MAAM,KAAK,UAAU,EAAE,OAAO,gCAAgC,CAAC;AAAA,MACjE;AAAA,IACF;AAGA,QAAI,CAAC,YAAY,SAAS,GAAG;AAC3B,aAAO;AAAA,QACL,YAAY;AAAA,QACZ,MAAM,KAAK,UAAU,EAAE,OAAO,oBAAoB,CAAC;AAAA,MACrD;AAAA,IACF;AAEA,UAAM,UAAU,YAAY,SAAS;AACrC,UAAM,WAAW,MAAM,QAAQ,WAAW,KAAK,MAAM,QAAQ,iBAAiB,KAAK;AAGnF,UAAM,YAAY,OAAO,WAAW,QAAQ,EAAE,OAAO,WAAW,QAAQ,IAAI,EAAE,OAAO,KAAK;AAC1F,UAAM,UAAU,cAAc,QAAQ;AAEtC,QAAI,SAAS;AAEX,YAAM,cAAc;AAAA,QAClB,EAAE,WAAW,MAAM,SAAS;AAAA,QAC5B;AAAA,QACA;AAAA,MACF;AAEA,YAAMA,gBAAe;AAAA,QACnB,EAAE,WAAW,MAAM,UAAU;AAAA,QAC7B;AAAA,QACA;AAAA,MACF;AAGA,cAAQ,IAAI,8BAA8B;AAAA,QACxC;AAAA,QACA,IAAI;AAAA,QACJ,YAAW,oBAAI,KAAK,GAAE,YAAY;AAAA,MACpC,CAAC;AAED,aAAO;AAAA,QACL,YAAY;AAAA,QACZ,SAAS;AAAA,UACP,gBAAgB;AAAA,UAChB,iBAAiB;AAAA,QACnB;AAAA,QACA,MAAM,KAAK,UAAU;AAAA,UACnB,SAAS;AAAA,UACT;AAAA,UACA,cAAAA;AAAA,UACA,WAAW;AAAA;AAAA,QACb,CAAC;AAAA,MACH;AAAA,IAEF,OAAO;AAEL,cAAQ,IAAI,kCAAkC;AAAA,QAC5C;AAAA,QACA,IAAI;AAAA,QACJ,YAAW,oBAAI,KAAK,GAAE,YAAY;AAAA,MACpC,CAAC;AAED,aAAO;AAAA,QACL,YAAY;AAAA,QACZ,MAAM,KAAK,UAAU;AAAA,UACnB,SAAS;AAAA,UACT,OAAO;AAAA,QACT,CAAC;AAAA,MACH;AAAA,IACF;AAAA,EAEF,SAAS,OAAO;AACd,YAAQ,MAAM,6BAA6B,KAAK;AAEhD,WAAO;AAAA,MACL,YAAY;AAAA,MACZ,MAAM,KAAK,UAAU,EAAE,OAAO,wBAAwB,CAAC;AAAA,IACzD;AAAA,EACF;AACF;",
  "names": ["refreshToken"]
}
