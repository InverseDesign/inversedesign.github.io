{
  "version": 3,
  "sources": ["../../../../../../Users/shazhongjin/www.inversedesign.net/inversedesign/netlify/functions/admin-comments.js"],
  "sourceRoot": "/var/folders/js/1zc4sx3x2mx8l8ftg7d_s7g40000gn/T/tmp-23670-OCJWjkVQOcPF",
  "sourcesContent": ["// \u8BC4\u8BBA\u7BA1\u7406\u540E\u53F0 API\n// \u63D0\u4F9B\u8BC4\u8BBA\u7684\u589E\u5220\u6539\u67E5\u529F\u80FD\n\n// \u6A21\u62DF\u6570\u636E\u5E93\u5B58\u50A8\nlet COMMENTS_DB = [\n  {\n    id: 'comment-1',\n    postId: '/blog/first-post/',\n    postTitle: '\u6211\u7684\u7B2C\u4E00\u7BC7\u535A\u5BA2\u6587\u7AE0',\n    author: '\u5F20\u4E09',\n    email: 'zhangsan@example.com',\n    content: '\u8FD9\u662F\u4E00\u6761\u793A\u4F8B\u8BC4\u8BBA\uFF0C\u6587\u7AE0\u5199\u5F97\u5F88\u597D\uFF01',\n    timestamp: new Date(Date.now() - 86400000).toISOString(),\n    userAgent: 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36',\n    ip: '192.168.1.1',\n    likes: 3,\n    status: 'approved',\n    createdAt: new Date(Date.now() - 86400000).toISOString()\n  },\n  {\n    id: 'comment-2',\n    postId: '/blog/shortcodes-demo/',\n    postTitle: 'Hugo Shortcodes \u73A9\u6CD5\u6F14\u793A',\n    author: '\u674E\u56DB',\n    email: 'lisi@example.com',\n    content: '\u611F\u8C22\u5206\u4EAB\uFF0C\u5B66\u5230\u4E86\u5F88\u591A\u6709\u7528\u7684\u77E5\u8BC6\u3002',\n    timestamp: new Date(Date.now() - 3600000).toISOString(),\n    userAgent: 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36',\n    ip: '192.168.1.2',\n    likes: 1,\n    status: 'pending',\n    createdAt: new Date(Date.now() - 3600000).toISOString()\n  }\n];\n\nexports.handler = async (event, context) => {\n  // \u53EA\u5141\u8BB8 POST \u8BF7\u6C42\n  if (event.httpMethod !== 'POST') {\n    return {\n      statusCode: 405,\n      body: JSON.stringify({ error: 'Method not allowed' })\n    };\n  }\n\n  try {\n    const { action, data } = JSON.parse(event.body);\n    \n    switch (action) {\n      case 'getAllComments':\n        return getAllComments();\n      case 'getCommentsByPost':\n        return getCommentsByPost(data.postId);\n      case 'updateCommentStatus':\n        return updateCommentStatus(data.commentId, data.status);\n      case 'deleteComment':\n        return deleteComment(data.commentId);\n      case 'getStats':\n        return getStats();\n      default:\n        return {\n          statusCode: 400,\n          body: JSON.stringify({ \n            success: false, \n            message: '\u672A\u77E5\u7684\u64CD\u4F5C\u7C7B\u578B' \n          })\n        };\n    }\n\n  } catch (error) {\n    console.error('\u8BC4\u8BBA\u7BA1\u7406\u9519\u8BEF:', error);\n    \n    return {\n      statusCode: 500,\n      body: JSON.stringify({ \n        success: false,\n        message: '\u670D\u52A1\u5668\u5185\u90E8\u9519\u8BEF\uFF0C\u8BF7\u7A0D\u540E\u91CD\u8BD5' \n      })\n    };\n  }\n};\n\n// \u83B7\u53D6\u6240\u6709\u8BC4\u8BBA\nfunction getAllComments() {\n  const comments = [...COMMENTS_DB].sort((a, b) => \n    new Date(b.createdAt) - new Date(a.createdAt)\n  );\n\n  return {\n    statusCode: 200,\n    headers: {\n      'Content-Type': 'application/json',\n      'Cache-Control': 'no-cache, no-store, must-revalidate'\n    },\n    body: JSON.stringify({\n      success: true,\n      comments: comments,\n      total: comments.length\n    })\n  };\n}\n\n// \u83B7\u53D6\u6307\u5B9A\u6587\u7AE0\u7684\u8BC4\u8BBA\nfunction getCommentsByPost(postId) {\n  const comments = COMMENTS_DB.filter(comment => \n    comment.postId === postId\n  ).sort((a, b) => new Date(b.createdAt) - new Date(a.createdAt));\n\n  return {\n    statusCode: 200,\n    headers: {\n      'Content-Type': 'application/json',\n      'Cache-Control': 'no-cache, no-store, must-revalidate'\n    },\n    body: JSON.stringify({\n      success: true,\n      comments: comments,\n      total: comments.length\n    })\n  };\n}\n\n// \u66F4\u65B0\u8BC4\u8BBA\u72B6\u6001\nfunction updateCommentStatus(commentId, status) {\n  const comment = COMMENTS_DB.find(c => c.id === commentId);\n  \n  if (!comment) {\n    return {\n      statusCode: 404,\n      body: JSON.stringify({ \n        success: false, \n        message: '\u8BC4\u8BBA\u4E0D\u5B58\u5728' \n      })\n    };\n  }\n\n  comment.status = status;\n  comment.updatedAt = new Date().toISOString();\n\n  console.log(`\u8BC4\u8BBA\u72B6\u6001\u66F4\u65B0: ${commentId} -> ${status}`);\n\n  return {\n    statusCode: 200,\n    body: JSON.stringify({\n      success: true,\n      message: '\u8BC4\u8BBA\u72B6\u6001\u66F4\u65B0\u6210\u529F',\n      comment: comment\n    })\n  };\n}\n\n// \u5220\u9664\u8BC4\u8BBA\nfunction deleteComment(commentId) {\n  const index = COMMENTS_DB.findIndex(c => c.id === commentId);\n  \n  if (index === -1) {\n    return {\n      statusCode: 404,\n      body: JSON.stringify({ \n        success: false, \n        message: '\u8BC4\u8BBA\u4E0D\u5B58\u5728' \n      })\n    };\n  }\n\n  const deletedComment = COMMENTS_DB.splice(index, 1)[0];\n  \n  console.log(`\u8BC4\u8BBA\u5DF2\u5220\u9664: ${commentId}`);\n\n  return {\n    statusCode: 200,\n    body: JSON.stringify({\n      success: true,\n      message: '\u8BC4\u8BBA\u5220\u9664\u6210\u529F',\n      deletedComment: deletedComment\n    })\n  };\n}\n\n// \u83B7\u53D6\u7EDF\u8BA1\u4FE1\u606F\nfunction getStats() {\n  const totalComments = COMMENTS_DB.length;\n  const approvedComments = COMMENTS_DB.filter(c => c.status === 'approved').length;\n  const pendingComments = COMMENTS_DB.filter(c => c.status === 'pending').length;\n  const spamComments = COMMENTS_DB.filter(c => c.status === 'spam').length;\n\n  // \u6309\u6587\u7AE0\u5206\u7EC4\u7EDF\u8BA1\n  const postStats = {};\n  COMMENTS_DB.forEach(comment => {\n    if (!postStats[comment.postId]) {\n      postStats[comment.postId] = {\n        postTitle: comment.postTitle,\n        total: 0,\n        approved: 0,\n        pending: 0\n      };\n    }\n    postStats[comment.postId].total++;\n    if (comment.status === 'approved') {\n      postStats[comment.postId].approved++;\n    } else if (comment.status === 'pending') {\n      postStats[comment.postId].pending++;\n    }\n  });\n\n  return {\n    statusCode: 200,\n    headers: {\n      'Content-Type': 'application/json',\n      'Cache-Control': 'no-cache, no-store, must-revalidate'\n    },\n    body: JSON.stringify({\n      success: true,\n      stats: {\n        total: totalComments,\n        approved: approvedComments,\n        pending: pendingComments,\n        spam: spamComments,\n        postStats: postStats\n      }\n    })\n  };\n}\n"],
  "mappings": "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",
  "names": []
}
