{
  "version": 3,
  "sources": ["../../../../../../Users/shazhongjin/www.inversedesign.net/inversedesign/netlify/functions/log-access.js"],
  "sourceRoot": "/var/folders/js/1zc4sx3x2mx8l8ftg7d_s7g40000gn/T/tmp-36696-03YOvQ6i06CG",
  "sourcesContent": ["// \u8BBF\u95EE\u65E5\u5FD7\u8BB0\u5F55\u51FD\u6570\nexports.handler = async (event, context) => {\n  // \u53EA\u5141\u8BB8 POST \u8BF7\u6C42\n  if (event.httpMethod !== 'POST') {\n    return {\n      statusCode: 405,\n      body: JSON.stringify({ error: 'Method not allowed' })\n    };\n  }\n\n  try {\n    const { contentId, success, timestamp, userAgent, ip } = JSON.parse(event.body);\n    \n    // \u57FA\u672C\u9A8C\u8BC1\n    if (!contentId || success === undefined) {\n      return {\n        statusCode: 400,\n        body: JSON.stringify({ error: 'Missing required fields' })\n      };\n    }\n\n    // \u83B7\u53D6\u771F\u5B9E\u5BA2\u6237\u7AEFIP\n    const clientIP = event.headers['client-ip'] || \n                    event.headers['x-forwarded-for'] || \n                    event.headers['x-real-ip'] || \n                    ip || \n                    'unknown';\n\n    // \u8BB0\u5F55\u8BBF\u95EE\u65E5\u5FD7\n    const logEntry = {\n      contentId,\n      success,\n      timestamp: timestamp || new Date().toISOString(),\n      ip: clientIP,\n      userAgent: userAgent || event.headers['user-agent'] || 'unknown',\n      referer: event.headers['referer'] || 'unknown',\n      method: event.httpMethod,\n      path: event.path\n    };\n\n    // \u5728\u5B9E\u9645\u5E94\u7528\u4E2D\uFF0C\u8FD9\u91CC\u5E94\u8BE5\u5C06\u65E5\u5FD7\u5199\u5165\u6570\u636E\u5E93\n    // \u4F8B\u5982\uFF1AMongoDB, PostgreSQL, \u6216\u8005\u4E91\u670D\u52A1\u5982 AWS CloudWatch\n    console.log('Access Log:', JSON.stringify(logEntry));\n\n    // \u53EF\u4EE5\u53D1\u9001\u5230\u5916\u90E8\u65E5\u5FD7\u670D\u52A1\n    // await sendToLogService(logEntry);\n\n    return {\n      statusCode: 200,\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({ \n        success: true, \n        message: 'Access logged successfully' \n      })\n    };\n\n  } catch (error) {\n    console.error('Log access error:', error);\n    \n    return {\n      statusCode: 500,\n      body: JSON.stringify({ error: 'Internal server error' })\n    };\n  }\n};\n\n// \u53D1\u9001\u5230\u5916\u90E8\u65E5\u5FD7\u670D\u52A1\u7684\u793A\u4F8B\u51FD\u6570\nasync function sendToLogService(logEntry) {\n  // \u793A\u4F8B\uFF1A\u53D1\u9001\u5230 Loggly\n  // const response = await fetch('https://logs-01.loggly.com/inputs/YOUR_TOKEN/tag/http/', {\n  //   method: 'POST',\n  //   headers: {\n  //     'Content-Type': 'application/json'\n  //   },\n  //   body: JSON.stringify(logEntry)\n  // });\n\n  // \u793A\u4F8B\uFF1A\u53D1\u9001\u5230 DataDog\n  // const response = await fetch('https://http-intake.logs.datadoghq.com/api/v2/logs', {\n  //   method: 'POST',\n  //   headers: {\n  //     'Content-Type': 'application/json',\n  //     'DD-API-KEY': 'YOUR_API_KEY'\n  //   },\n  //   body: JSON.stringify([logEntry])\n  // });\n\n  // \u793A\u4F8B\uFF1A\u53D1\u9001\u5230 AWS CloudWatch\n  // const AWS = require('aws-sdk');\n  // const cloudwatch = new AWS.CloudWatchLogs();\n  // await cloudwatch.putLogEvents({\n  //   logGroupName: '/your-app/access-logs',\n  //   logStreamName: 'password-verification',\n  //   logEvents: [{\n  //     timestamp: Date.now(),\n  //     message: JSON.stringify(logEntry)\n  //   }]\n  // }).promise();\n}\n"],
  "mappings": ";AACA,QAAQ,UAAU,OAAO,OAAO,YAAY;AAE1C,MAAI,MAAM,eAAe,QAAQ;AAC/B,WAAO;AAAA,MACL,YAAY;AAAA,MACZ,MAAM,KAAK,UAAU,EAAE,OAAO,qBAAqB,CAAC;AAAA,IACtD;AAAA,EACF;AAEA,MAAI;AACF,UAAM,EAAE,WAAW,SAAS,WAAW,WAAW,GAAG,IAAI,KAAK,MAAM,MAAM,IAAI;AAG9E,QAAI,CAAC,aAAa,YAAY,QAAW;AACvC,aAAO;AAAA,QACL,YAAY;AAAA,QACZ,MAAM,KAAK,UAAU,EAAE,OAAO,0BAA0B,CAAC;AAAA,MAC3D;AAAA,IACF;AAGA,UAAM,WAAW,MAAM,QAAQ,WAAW,KAC1B,MAAM,QAAQ,iBAAiB,KAC/B,MAAM,QAAQ,WAAW,KACzB,MACA;AAGhB,UAAM,WAAW;AAAA,MACf;AAAA,MACA;AAAA,MACA,WAAW,cAAa,oBAAI,KAAK,GAAE,YAAY;AAAA,MAC/C,IAAI;AAAA,MACJ,WAAW,aAAa,MAAM,QAAQ,YAAY,KAAK;AAAA,MACvD,SAAS,MAAM,QAAQ,SAAS,KAAK;AAAA,MACrC,QAAQ,MAAM;AAAA,MACd,MAAM,MAAM;AAAA,IACd;AAIA,YAAQ,IAAI,eAAe,KAAK,UAAU,QAAQ,CAAC;AAKnD,WAAO;AAAA,MACL,YAAY;AAAA,MACZ,SAAS;AAAA,QACP,gBAAgB;AAAA,MAClB;AAAA,MACA,MAAM,KAAK,UAAU;AAAA,QACnB,SAAS;AAAA,QACT,SAAS;AAAA,MACX,CAAC;AAAA,IACH;AAAA,EAEF,SAAS,OAAO;AACd,YAAQ,MAAM,qBAAqB,KAAK;AAExC,WAAO;AAAA,MACL,YAAY;AAAA,MACZ,MAAM,KAAK,UAAU,EAAE,OAAO,wBAAwB,CAAC;AAAA,IACzD;AAAA,EACF;AACF;",
  "names": []
}
